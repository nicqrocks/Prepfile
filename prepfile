#!/bin/bash
#This is a small script to make things easier when writing scripts.


#Defualt values for certain things.
editor="vim"
usefile="rename_me.sh"




#Make help function for when I forget. Which is often...
function print_help() {
   echo "
USEAGE: prepfile [-e] [FILE TO EDIT]

-e [EDITOR]          Declare what editor to use
                     when editing the file. The
                     default is set to $editor.

-h |  --help         Print this help menu.

This script takes one file as the file to edit, if any more
are supplied, it chooses the last in the list. This script
is designed to make scripts easier to create and edit by
removing some of the tedious steps involved, aka typing. Once
the file is finished editing, it will prompt the user for any
arguments to give it, and will execute with them. "
   exit 0
}


#Make a small function to print out errors easier.
function echoerr() {
    echo "$1" >&2
}


#Check for any arguments given. If none are given, exit with help.
if [ $# -lt 1 ]; then
   print_help
fi

#Analize each argument given and take the appropriate action
while [ $# -gt 0 ]
do
   case "$1" in
   '-e')
      shift
      editor="$1"
      shift
      ;;
   '-h'|'--help')
      print_help
      shift
      ;;
   '-'*)
      echoerr "Error - Option not recognized: $1"
      echoerr "Exiting $0"
      exit 1
      ;;
   *)
      usefile="$1"
      shift
      ;;
   esac
done



#Keep trying until the exit code is 0.
cont='yes'
while [[ $cont == [Yy] ]] || [[ $cont == [Yy]es ]]
do 
   #check if the file exists.
   if [ ! -e "$usefile" ]; then
      echo "Making the file '$usefile' ..."
      touch $usefile
   fi
   
   #open the editor.
   echo "Opening editor $editor..."
   $editor $usefile
   
   #change permissions so the file can be run.
   echo "Setting permissions..."
   chmod +x $usefile
   
   
   
   #Add any arguments to the file before executing it.
   echo "Would you like to add any arguments?"
   read answer
   while [[ $answer != [Yy] ]] && [[ $answer != [Yy]es ]] && [[ $answer != [Nn] ]] && [[ $answer != [Nn]o ]]
   do
      echo "Answer not understood. Try again."
      read answer
   done
   if [[ $answer == [Yy] ]] || [[ $answer == [Yy]es ]]; then
      echo "Arguments to add:"
      read args
   elif [[ $answer == [Nn] ]] || [[ $answer == [Nn]o ]]; then
      echo "No args"
      args=''
   fi
   echo "executing the file..."
   echo ""
   echo "$(tput setaf 3)-----$usefile-----$(tput setaf 9)"
   
   #Determine the kind of file it is by the file extention
   #at the end.
   case "$usefile" in
   *'.c')
      #Compile and run C source code.
	  if [[ "$usefile" == '/'* ]] || [[ "$usefile" == '~/'* ]]; then
         out=${usefile: 0: -2}
      else
      	  out=./${usefile: 0: -2}
      fi
	  gcc -o $out $usefile && $out
	  code="$?"
	  ;;
   *'.java')
      #Compile the java code and run it.
	  class=${usefile: 0: -5} #Remove the '.java' extention
	  javac $usefile && java $class $args
	  code="$?"
	  ;;
   *'.sh'|*)
      #Run the file as a shell script.
      if [[ "$usefile" == '/'* ]] || [[ "$usefile" == '~/'* ]]; then
         $usefile $args
		 code="$?"
      else
      	  ./$usefile $args
	  code="$?"
      fi
	  ;;
   esac
   
   
   
   
   #Check if it exited with any errors.
   if [ $code -eq 0 ]; then
      echo ""
      echo "Done."
      exit 0
   fi
   
   
   #If the script does not have an exit code of 0
   #ask to run it again.
   echo "Exit code: $code"
   echo ""
   echo "The script seems to have failed. Would you like"
   echo "to edit it some more?"
   read cont
   while [[ $answer != [Yy] ]] && [[ $answer != [Yy]es ]] && [[ $answer != [Nn] ]] && [[ $answer != [Nn]o ]]
   do
      echo "Answer not understood. Try again."
      read cont
   done
   
done

exit 0
